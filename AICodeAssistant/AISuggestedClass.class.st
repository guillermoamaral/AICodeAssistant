"
Represents a class generated by an AICodeAssistant, providing services to check whether the class exist/install it in the system.
"
Class {
	#name : 'AISuggestedClass',
	#superclass : 'Object',
	#instVars : [
		'superclassName',
		'name',
		'instanceVariableNames',
		'classVariableNames',
		'methods'
	],
	#category : 'AICodeAssistant-Base',
	#package : 'AICodeAssistant',
	#tag : 'Base'
}

{ #category : 'instance creation' }
AISuggestedClass class >> named: aString [
	
	^ self new name: aString
]

{ #category : 'accessing' }
AISuggestedClass >> addMethod: anAISuggestedMethod [

	methods add: anAISuggestedMethod.
	anAISuggestedMethod suggestedClass: self
]

{ #category : 'testing' }
AISuggestedClass >> canBeInstalled [

	^ Smalltalk globals includesKey: superclassName asSymbol
]

{ #category : 'accessing' }
AISuggestedClass >> classVariableNames [

	^ classVariableNames ifNil: [ #(  ) ]
]

{ #category : 'accessing' }
AISuggestedClass >> classVariableNames: aCollection [

	classVariableNames := aCollection
]

{ #category : 'testing' }
AISuggestedClass >> exists [

	^ self realClass notNil
]

{ #category : 'initialization' }
AISuggestedClass >> initialize [

	super initialize.
	instanceVariableNames := #(  ).
	classVariableNames := #(  ).
	methods := OrderedCollection new
]

{ #category : 'services' }
AISuggestedClass >> install [

	Smalltalk classInstaller make: [ :builder |
		builder
			name: name asSymbol;
			superclass: (Smalltalk at: superclassName asSymbol);
			slots: (instanceVariableNames collect: [ :n | n asSymbol ]);
			sharedVariables: (classVariableNames collect: [ :n | n asSymbol ]);
			comment: 'This class was generated by AICodeAssistant';
			package: 'AICodeAssistant';
			tag: 'Generated code' ]
]

{ #category : 'accessing' }
AISuggestedClass >> instanceVariableNames [

	^ (instanceVariableNames ifNil: [#()])
]

{ #category : 'accessing' }
AISuggestedClass >> instanceVariableNames: aCollection [

	instanceVariableNames := aCollection
]

{ #category : 'accessing' }
AISuggestedClass >> methods [

	^ methods
]

{ #category : 'accessing' }
AISuggestedClass >> methods: aCollection [

	methods := aCollection
]

{ #category : 'accessing' }
AISuggestedClass >> name [

	^ name
]

{ #category : 'accessing' }
AISuggestedClass >> name: aString [

	name := aString
]

{ #category : 'printing' }
AISuggestedClass >> printOn: aStream [

	aStream
		nextPutAll: name;
		crtab;
		nextPutAll: 'superclass: ';
		nextPutAll: (superclassName ifNil: [ '' ]);
		nextPutAll: 'instanceVariableNames: '.
	self instanceVariableNames printOn: aStream.
	aStream
		crtab;
		nextPutAll: 'classVariableNames: '.
	self classVariableNames printOn: aStream
]

{ #category : 'accessing' }
AISuggestedClass >> realClass [

	^ Smalltalk globals at: name asSymbol ifAbsent: [  ]
]

{ #category : 'accessing' }
AISuggestedClass >> superclassName [

	^ superclassName
]

{ #category : 'accessing' }
AISuggestedClass >> superclassName: aString [

	superclassName := aString
]
