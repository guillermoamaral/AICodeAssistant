"
This object encapsulates code (classes and methods) generated by an AICodeAssistant, together with the rationale behind as well as the reasons why the code could not be provided (if that is the case)
"
Class {
	#name : 'AICodeGenerationResult',
	#superclass : 'Object',
	#instVars : [
		'thinking',
		'issue',
		'classes',
		'methods'
	],
	#category : 'AICodeAssistant-Base',
	#package : 'AICodeAssistant',
	#tag : 'Base'
}

{ #category : 'accessing' }
AICodeGenerationResult >> classes [

	^ classes ifNil: [ #() ]
]

{ #category : 'accessing' }
AICodeGenerationResult >> classes: aCollection [

	classes := aCollection
]

{ #category : 'testing' }
AICodeGenerationResult >> hasIssues [

	^ issue notNil
]

{ #category : 'accessing' }
AICodeGenerationResult >> issue [

	^ issue
]

{ #category : 'accessing' }
AICodeGenerationResult >> issue: aString [

	issue := aString
]

{ #category : 'accessing' }
AICodeGenerationResult >> methods [

	^ methods ifNil: [ #() ]
]

{ #category : 'accessing' }
AICodeGenerationResult >> methods: aCollection [

	methods := aCollection
]

{ #category : 'printing' }
AICodeGenerationResult >> printOn: aStream [

	aStream
		nextPutAll: 'Thinking: ';
		nextPutAll: (thinking ifNil: [ '' ]);
		cr;
		nextPutAll: 'Issue: ';
		nextPutAll: (issue ifNil: [ '' ]);
		cr;
		nextPutAll: 'Classes: '.
	classes ifNotNil: [
		classes do: [ :class |
			aStream
				crtab;
				crtab.
			class printOn: aStream ] ].
	aStream
		cr;
		nextPutAll: 'Methods: '.
	methods ifNotNil: [
		methods do: [ :method |
			aStream
				crtab;
				crtab.
			method printOn: aStream ] ]
]

{ #category : 'accessing' }
AICodeGenerationResult >> thinking [

	^ thinking ifNil: [ 'No thinking' ]
]

{ #category : 'accessing' }
AICodeGenerationResult >> thinking: aString [

	thinking := aString
]
